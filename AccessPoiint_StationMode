#include <WiFi.h>
#include <WebServer.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"

String val;
const char* ap_ssid = "ESP32-Config";  // AP SSID
const char* ap_password = "12345678";  // AP password

WebServer server(80);

void handleRoot() {
    server.send(200, "text/html", R"(
        <!DOCTYPE html>
        <html>
        <body>
        <h1>ESP32 WiFi Configuration</h1>
        <form action="/save">
          SSID: <input type="text" name="ssid"><br>
          Password: <input type="text" name="password"><br>
          Tempreture: <input type="integer" name="val"><br>
          <input type="submit" value="Save">
        </form>
        </body>
        </html>
    )");
}

void handleSave() {
    String ssid = server.arg("ssid");
    String password = server.arg("password");
     val = server.arg("val");


    server.send(200, "text/html", "<h1>Connecting to WiFi...</h1>");

    // Disconnect from any current WiFi connections
    WiFi.disconnect();
    delay(1000);

    // Connect to the new WiFi network
    WiFi.begin(ssid.c_str(), password.c_str());

    int count = 0;
    while (WiFi.status() != WL_CONNECTED && count < 20) {  // wait for max 20 seconds
        delay(1000);
        count++;
    }

    if (WiFi.status() == WL_CONNECTED) {
        Serial.println("Connected to WiFi!");
        Serial.print("Station IP address: ");
        Serial.println(WiFi.localIP());
        server.send(200, "text/html", "<h1>Connected to WiFi!</h1><p>Station IP address: " + WiFi.localIP().toString() + "</p>");
        Serial.println("Input value is" + String(val));
    } else {
        Serial.println("Failed to connect to WiFi");
        server.send(200, "text/html", "<h1>Failed to connect to WiFi. Please try again.</h1>");
    }
}

void setupAP() {
    // Set up Access Point mode
    WiFi.softAP(ap_ssid, ap_password);
    Serial.println("Access Point started");
    Serial.print("AP IP address: ");
    Serial.println(WiFi.softAPIP());

    // Start the server and define routes
    server.on("/", handleRoot);
    server.on("/save", handleSave);
    server.begin();
}

void handleClientTask(void *pvParameters) {
    for (;;) {
        server.handleClient();
        vTaskDelay(1);  // Yield to other tasks
    }
}

void setup() {
    Serial.begin(115200);

    setupAP();  // Set up Access Point

    // Create a FreeRTOS task for handling clients
    xTaskCreate(handleClientTask, "HandleClientTask", 4096, NULL, 1, NULL);
}

void loop() {
    // The loop function is intentionally left empty
    // FreeRTOS tasks are running in the background
}
